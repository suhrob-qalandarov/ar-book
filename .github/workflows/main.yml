name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "Dockerfile, docker-compose.yml, target/ar-book-0.0.1-SNAPSHOT.jar"
          target: "/tmp/ar-book-deployment"

      - name: Login to Server via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          script: |
            # Ensure target directory exists
            mkdir -p /home/${{ secrets.SSH_USER }}/ar-book || exit 1

            # ‚ùå Remove all old files to avoid overwrite errors
            rm -rf /home/${{ secrets.SSH_USER }}/ar-book/* || exit 1

            # Move new deployment files
            mv /tmp/ar-book-deployment/* /home/${{ secrets.SSH_USER }}/ar-book/ || exit 1
            cd /home/${{ secrets.SSH_USER }}/ar-book || exit 1

            # Create .env file from secrets
            cat <<EOF > .env
            DB_URL=${{ secrets.DB_URL }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            BUCKET_REGION=${{ secrets.BUCKET_REGION }}
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            EOF

            docker-compose down --remove-orphans || exit 1
            docker image prune -f || exit 1
            docker-compose build || exit 1
            docker-compose up -d || exit 1
